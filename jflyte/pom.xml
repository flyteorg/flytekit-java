<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2021 Flyte Authors.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>org.flyte</groupId>
    <artifactId>flytekit-parent</artifactId>
    <version>0.3.29-SNAPSHOT</version>
  </parent>

  <artifactId>jflyte</artifactId>

  <name>JFlyte - Flytekit Java SDK implementation</name>
  <description>Compiles developer's Tasks, Workflows and Launch plans into Flyte's protos.
    Also
    register the protos with Flyteadmin.</description>

  <properties>
    <docker.image>ghcr.io/flyteorg/flytekit-java</docker.image>
    <docker.tag>${project.version}</docker.tag>
    <maven.deploy.skip>true</maven.deploy.skip>
  </properties>

  <dependencies>
    <!-- compile -->
    <dependency>
      <groupId>org.flyte</groupId>
      <artifactId>flyteidl-protos</artifactId>
    </dependency>
    <dependency>
      <groupId>org.flyte</groupId>
      <artifactId>flytekit-api</artifactId>
    </dependency>
    <dependency>
      <groupId>org.flyte</groupId>
      <artifactId>flytekit-local-engine</artifactId>
    </dependency>
    <dependency>
      <groupId>org.flyte</groupId>
      <artifactId>jflyte-api</artifactId>
    </dependency>
    <dependency>
      <groupId>org.flyte</groupId>
      <artifactId>jflyte-aws</artifactId>
      <!-- We want to have the dependency, so it is already built before building the docker image,
           but we want to avoid the artifacts from the module to pollute jflyte -->
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.flyte</groupId>
      <artifactId>jflyte-google-cloud</artifactId>
      <!-- We want to have the dependency, so it is already built before building the docker image,
           but we want to avoid the artifacts from the module to pollute jflyte -->
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>jul-to-slf4j</artifactId>
    </dependency>
    <dependency>
      <groupId>info.picocli</groupId>
      <artifactId>picocli</artifactId>
    </dependency>
    <dependency>
      <groupId>io.grpc</groupId>
      <artifactId>grpc-netty</artifactId>
    </dependency>
    <dependency>
      <groupId>io.grpc</groupId>
      <artifactId>grpc-protobuf</artifactId>
    </dependency>
    <dependency>
      <groupId>io.grpc</groupId>
      <artifactId>grpc-stub</artifactId>
    </dependency>
    <dependency>
      <groupId>io.netty</groupId>
      <artifactId>netty-tcnative-boringssl-static</artifactId>
    </dependency>

    <!-- runtime -->
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-simple</artifactId>
      <scope>runtime</scope>
    </dependency>

    <!-- provided -->
    <dependency>
      <groupId>com.google.auto.value</groupId>
      <artifactId>auto-value-annotations</artifactId>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>com.google.auto.service</groupId>
      <artifactId>auto-service-annotations</artifactId>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>com.google.errorprone</groupId>
      <artifactId>error_prone_annotations</artifactId>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>com.google.code.findbugs</groupId>
      <artifactId>jsr305</artifactId>
      <scope>provided</scope>
    </dependency>

    <!-- test -->
    <dependency>
      <groupId>org.flyte</groupId>
      <artifactId>flytekit-jackson</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.flyte</groupId>
      <artifactId>flytekit-java</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.vintage</groupId>
      <artifactId>junit-vintage-engine</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-params</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.hamcrest</groupId>
      <artifactId>hamcrest</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.grpc</groupId>
      <artifactId>grpc-testing</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-core</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.github.marschall</groupId>
      <artifactId>memoryfilesystem</artifactId>
      <scope>test</scope>
    </dependency>
    <!-- ensure there is at least one slf4j implementation in test classpath so that we can test
         org/slf4j/impl/StaticLoggerBinder.class is only discovered in child class loader -->
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <artifactId>maven-jar-plugin</artifactId>
      </plugin>
      <plugin>
        <artifactId>maven-dependency-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>com.google.cloud.tools</groupId>
        <artifactId>jib-maven-plugin</artifactId>
        <configuration>
          <from>
            <image>gcr.io/distroless/java11:latest</image>
          </from>
          <container>
            <environment>
              <FLYTE_INTERNAL_MODULE_DIR>/jflyte/modules</FLYTE_INTERNAL_MODULE_DIR>
              <FLYTE_INTERNAL_IMAGE>${docker.image}:${docker.tag}</FLYTE_INTERNAL_IMAGE>
              <FLYTE_PLATFORM_URL>flyte:30081</FLYTE_PLATFORM_URL>
              <FLYTE_PLATFORM_INSECURE>True</FLYTE_PLATFORM_INSECURE>
            </environment>
            <jvmFlags>
              <jvmFlag>-Dorg.slf4j.simpleLogger.defaultLogLevel=INFO</jvmFlag>
              <jvmFlag>-Dorg.slf4j.simpleLogger.log.org.flyte=DEBUG</jvmFlag>
            </jvmFlags>
            <mainClass>org.flyte.jflyte.Main</mainClass>
            <appRoot>/jflyte/</appRoot>
            <extraClasspath>/jflyte/modules/*</extraClasspath>
          </container>
          <to>
            <image>${docker.image}</image>
            <tags>
              <tag>${docker.tag}</tag>
            </tags>
          </to>
          <extraDirectories>
            <paths>
              <path>
                <from>${project.parent.basedir}/jflyte-aws/target/lib</from>
                <into>/jflyte/modules/jflyte-aws</into>
              </path>
              <path>
                <from>${project.parent.basedir}/jflyte-google-cloud/target/lib</from>
                <into>/jflyte/modules/jflyte-google-cloud</into>
              </path>
            </paths>
          </extraDirectories>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>dockerBuild</goal>
            </goals>
            <phase>package</phase>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
</project>
